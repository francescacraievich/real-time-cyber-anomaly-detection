name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-docs-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate documentation build
        run: mkdocs build --strict

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run linting
        if: hashFiles('src/**/*.py') != ''
        run: |
          pip install flake8 black isort
          if [ -d src ]; then black --check src/; fi
          if [ -d tests ]; then black --check tests/; fi
          if [ -d src ]; then isort --check-only src/; fi
          if [ -d tests ]; then isort --check-only tests/; fi
          if [ -d src ]; then flake8 src/; fi
          if [ -d tests ]; then flake8 tests/; fi

      - name: Run tests with coverage
        if: hashFiles('tests/**/*.py') != ''
        run: |
          pip install pytest pytest-cov
          if [ -d tests ]; then pytest tests/ --cov=src --cov-report=xml --cov-report=term; fi

      - name: Upload coverage to Codecov
        if: hashFiles('tests/**/*.py') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false